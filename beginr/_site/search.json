[
  {
    "objectID": "vectors-and-variables.html",
    "href": "vectors-and-variables.html",
    "title": "Vectors and variables",
    "section": "",
    "text": "Restart chapter \n\n\nLast chapter, we saw an example of a vector: a sequence of data of the same type, for example, a sequence of numbers or a sequence of strings. When analyzing data, you almost never deal with single numbers, and the reason you need to analyze the data in the first place is likely because there are heaps of it! That‚Äôs why handling sequences of strings and numbers is central to data analysis and why vectors are core to R.\nLet me show you how central vectors are to R.\n\nType any number in the box below and press ‚ñ∂ Run Code.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBut it‚Äôs not just a number. It‚Äôs actually a one-item vector with a single number. In R, even single numbers are vectors.\nSometimes, you would want to create new vectors longer than a single number. This can be done using the c() function that combines many values. For example, c(2, 3, 5, 7, 9) will create a numeric vector with all prime numbers between 1 and 10.\n\nCreate a numeric vector using c() with at least 5 items. (By the way, I‚Äôll check if any of them are prime numbers.)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are many functions that help you create vectors in R, one shortcut is the colon operator where, say, 10:30 would create the vector 10, 11, 12, ..., 28, 29, 30.\n\nUse the colon : operator to create the vector 1, 2, 3, ..., 98, 99, 100. (I‚Äôll, again, figure out which are prime.)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMany functions in R are vectorized, that is, they work both on single values, as well as vectors. For example, nchar(\"pizza\") returns 5, the number of characters in \"pizza\". But nchar() also works on vectors of strings.\n\nUse nchar() to count the number of characters in each word.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd, especially, all math operators (+, *, etc.) are vectorized. That is, 1:3 * 5 would give you 5, 10, 15.\n\nMake the below output the vector c(15, 25, 35, 45, 55, 65, 75, 85, 95, 105) by only changing the numbers in * 1 + 0 (leave 1:10 alone!)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen doing math with two vectors of the same length, the operation will be applied to each corresponding pair of values. It‚Äôs easier than it sounds. For example, c(10, 20, 30) + c(1, 2, 3) gives 11, 22, 33 and 11:14 - 1:4 gives 10, 10, 10, 10.\n\nChange the code below to subtract the expenses from the quarterly sales to get the quarterly profit.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMoving around the numbers directly, like you did above, can work, but it gets messy. It can be made more organized by assigning the values to variables. This needs explanation, but first, let‚Äôs look at an example:\npi &lt;- 3.141593\nHere we‚Äôre taking the value (3.141593) and by using &lt;-, the assignment operator, we‚Äôre assigning it to (‚Äúputting it into‚Äù) a variable named pi. Now, instead of writing 2 * 3.141593 * 5, we can write 2 * pi * 5. The assignment operator is made up of a &lt; and a -, and is meant to look like a left-pointing arrow.\nVariables can be given both short and long names, but they can‚Äôt include spaces. Instead, it‚Äôs common to use underscores (_) to separate words in longer names.\n\nAgain, calculate the quarterly profit. But this time by replacing the ______ placeholder and assigning the result to the variable quarterly_profit.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVariables need to be assigned before they can be used. This won‚Äôt work:\ny &lt;- x + 1  # won't work as x doesn't exist at this point!\nx &lt;- 1\nHowever, variable names can be reused and ‚Äúoverwritten‚Äù. For example, this is okay:\nx &lt;- 10\nx &lt;- x + 1\nx &lt;- x + 1\nx &lt;- x + 1\n\nBut what would now be the value of x? Write it in the box below and press ‚ñ∂ Run Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHere‚Äôs some more sales data for you!\nc(13, 22, 37, 35, 9, 16, 19, 18, 15, 37,\n  30, 12, 14, 14, 16, 11, 33, 31, 19, 17,\n  15, 7, 15, 23, 12, 5, 7, 9, 9, 14)\nThis is the number of sold ice cream cones at my cafe in Hyderabad, India for each day in June 2023. (As opposed to the Hyderabadi temperature data we looked at last chapter, this data is unfortunately made up.)\n\nCopy the ice cream sales data to the code box below and assign it to the variable sold_ice_creams.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnother thing one can do with a vector is to subset it using the square brackets operator ([]). For example, here‚Äôs how you would pick out the 1st value in sold_ice_creams:\nsold_ice_creams[1]\n[1] 13\n\nPick out the 2nd value in sold_ice_creams.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou can also subset a range of values using the colon operator. For example, this would pick out the first three days of sales:\nsold_ice_creams[1:3]\n[1] 13 22 37\n\nPick out the first seven days of sales from sold_ice_creams.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA subset of a vector can be used as any other vector. For example, this here would calculate the median sales for the first week in June:\nmedian(sold_ice_creams[1:7])\n[1] 19\n\nUse the sum() function to calculated the total sales for the first week in sold_ice_creams.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAs a last thing, let‚Äôs bring in the daily max temperature data from last chapter. Again, I‚Äôve put that into the temp variable.\nNow, the plot() function can make simple scatter plots that show two numeric vectors against each other. For example, here‚Äôs how one would plot age against height:\nplot(x = age, y = height)\nLet‚Äôs look at the relationship between the temperature and ice cream sales.\n\nMake a scatter plot with temp on the x-axis and sold_ice_creams on the y-axis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou‚Äôve completed the chapter, great work!\nSo the plot above is correct because the values in temp and sold_ice_creams vectors line up. But, rather than juggling several related vectors, wouldn‚Äôt it be better to stick them all into something like a spreadsheet or table?\nYes it would! And that‚Äôs what this next chapter is all about: üëâ3. Data files and data framesüëà",
    "crumbs": [
      "2. Vectors and variables"
    ]
  },
  {
    "objectID": "and-all-the-rest.html",
    "href": "and-all-the-rest.html",
    "title": "And all the rest",
    "section": "",
    "text": "Restart chapter \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGreat work! Now go to the next chapter.",
    "crumbs": [
      "5. And all the rest"
    ]
  },
  {
    "objectID": "visualization.html",
    "href": "visualization.html",
    "title": "Visualization",
    "section": "",
    "text": "Restart chapter \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGreat work! Now go to the next chapter.",
    "crumbs": [
      "4. Visualization"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R starts here!",
    "section": "",
    "text": "Restart chapter \n\n\nR is a powerful programming language that excels at data analysis and statistics. But really, it can do almost anything!\nBut let‚Äôs start simple: Out-of-the-box R can do everything you‚Äôd expect a calculator to do. Here‚Äôs a code cell where you can put in any R code you want.\n\nBut for now, just add two numbers together and press ‚ñ∂ Run Code.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFriends of +, like -, /, and * work as expected. R also includes a large number of mathematical functions, like log(), exp(), and sqrt(). To call a function you write its name followed by the argument between parentheses, like log(2.72) or sin(1.57).\n\nCalculate the square root of 1764 using sqrt().\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunctions can have more than one argument, which, are, then, separated, by, commas. For example, max(1, 3, 5, 4, 2) returns the highest of it‚Äôs arguments: 5. Another function that can take many arguments is sum().\n\nUse sum() to sum up several large numbers, I don‚Äôt care which, but they should total more than 1,000,000!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR can work with more than numbers and there are many other types of data, or data types, in R. A piece of text, often called a string, is written by putting the text ‚Äúinto quotes‚Äù.\n\nTry writing a string, any string, in the code cell below. I‚Äôll repeat it three times.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLike with numbers, you can also apply functions to strings. For example, tolower() turns all characters into lower case.\n\nWe‚Äôre in a library. Use tolower() on the string to get the upset person to calm down.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd, of course, there are functions that take both numbers and strings as arguments. But the order of the arguments is important! For example, for rep() the first argument is the value to repeat, and the second argument is the number of repetitions.\n\nRepeat a moderately dirty word a 100 times using rep().\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt might not be obvious, but the result above is actually a list of 100 strings. That‚Äôs why there are [ ] with numbers showing the index of the right-most elements. In R, lists where all elements are of the same data type are called vectors (to confuse you, there‚Äôs also something else called a list in R, but that‚Äôs for another time).\nI‚Äôve gone ahead and created a numeric vector for you. It‚Äôs called temp and contains the max C¬∞ temperature in Hyderabad, India for each day in June 2023 (source). In R you can print out a representation of whatever you want to look at by simply writing its name.\n\nTake a look at the data in temp.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBut, there are 30 days in June, right? Are there really 30 temperatures in temp?\n\nUse the length() function to count the number of elements in temp.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd what was the highest temperature in Hyderabad in June 2023?\n\nUse max() to get the highest value in temp.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBut it wasn‚Äôt 42.4 C¬∞ every day, I hope. What was the mean temperature?\n\nUse, you guessed it, mean() to get the mean/average of temp\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAs you‚Äôve seen, there are many things you can do, once you‚Äôve gotten some data into R. One thing that‚Äôs always nice to do with new data is to plot it!\n\nUse plot() to make a simple time-series plot of temp.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR is great for making beautiful plots, but that usually takes a bit more effort. But, as the last exercise in this chapter, let‚Äôs spiff up this plot, just a little bit!\nMany functions in R can be given optional arguments, and plot() has many that change the appearance of the plot. Arguments to a function can also be given in the form the_argument_name = \"the value\", and then the argument order doesn‚Äôt matter anymore.\n\nFor the plot arguments below, replace ______ between the \"\" to your liking.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGreat work! Now on to üëâChapter 2: Vectors and variablesüëà",
    "crumbs": [
      "1. R starts here!"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is a short 1-2h introduction to the R programming language and was made by me, Rasmus B√•√•th. It‚Äôs aimed at people who never tried out R before and is meant to give you a feeling for what programming in R is and what R can do. If you use it in a course, please do send me a message (rasmus.baath@gmail.com) and let me know how it went.\nThis introduction was made possible thanks to the quarto, webr, and quarto-live projects. The full source code can be found on GitHub.",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "data-files-and-data-frames.html",
    "href": "data-files-and-data-frames.html",
    "title": "Data files and data frames",
    "section": "",
    "text": "Restart chapter \n\n\n\nLast chapter we learned about vectors: sequences of numbers or strings. But if you ever worked with data, you know that data usually doesn‚Äôt get e-mailed to you as a vector, it comes as a table or spreadsheet. Tables are also the most common way to work with data in R, and in this chapter we‚Äôll learn more about that.\nThe first thing we‚Äôll learn is that, in R, tables are called data frames. There‚Äôs many ways to create data frames and one basic way is to stick some vectors in the data.frame() function. For example, data.frame(x, y, z) would create a data frame that included the data from vectors x, y, and z as columns.\n\nReplace the ______ placeholder with a data frame with columns quarter, revenue, and expenses and assign it to the variable finances. Then, press ‚ñ∂ Run Code.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBut, let‚Äôs have a look, just to be sure!  (Remember that you can print out the contents of a variable by just writing its name.)\n\nTake a look at the contents of finances.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCompared to a spreadsheet, data frames are less flexible. They typically only have column names, no row names, and you certainly can‚Äôt color the cells. But the lack of flexibility also means that data frames are more predictable and easier to program with than spreadsheets.\nOne good way to think of data frames are as a collection of vectors, each vector being a column. You can ‚Äúget out‚Äù or access the vectors in a data frame using the $ operator. For example, finances$quarter would be the vector c(\"Q1\", \"Q2\", \"Q3\", \"Q4\").\n\nThe code below adds the column/vector profit to finaces. Replace the ______ placeholder and use the sum() function to sum up the profit for all quarters.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBut now we‚Äôre at a crossroad. R is an old programming language (most likely older than you!) and over the years people have come up with different ways to compute on and manipulate data in R. In this tutorial, we have to decide which way to go for. And I‚Äôve already made up my mind here.\nOn account of it being intuitive, powerful, and popular, we‚Äôre going to use the tidyverse packages to work with data in R. A package is, well, a package of new functions and functionality, that can be added to R. The tidyverse is a collection of packages for data manipulation, visualization etc. that work well together.\nTo use a package you pull it out of your library of installed packages using the library() function\n\nStart using the tidyverse by running library(tidyverse).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOne of the many useful functions in the tidyverse is read_csv(). It can be used to read data frames from comma separated value (CSV) files, a simple text format for storing tabular data. Here‚Äôs the first four lines from the CSV file hyderabad-sales-2023-june.csv:\ndate,day_of_week,temp_max,sold_ice_creams,sold_coffee\n2023-06-01,Thursday,38.9,13,17\n2023-06-02,Friday,40.6,22,21\n2023-06-03,Saturday,40.8,37,19\nThe first row show the column headers, and each following row hold the comma separated values. To read in a comma separated file, say data.csv, give it as a string argument like this: read_csv(\"data.csv\").\n\nTake a look at hyderabad-sales-2023-june.csv by reading it in with read_csv().\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe printout above informs us that hyderabad-sales-2023-june.csv was read in as A tibble: 30 √ó 5. The 30 makes sense, there are 30 days in June, and there are 5 column in the data frame, but what‚Äôs a tibble? That‚Äôs just the tidyverses‚Äôs version of R‚Äôs regular data frames, but for the most part they can be used in the same way.\nBut we can‚Äôt use the data that we read in, at all! We read it in with read_csv, we got a printout, but, as we didn‚Äôt assign the it to a variable, we can do anything with it. Remember that you assign values to variable names using the arrow operator &lt;-. For example, a_random_number &lt;- runif(1) would put a random number between 0.0 and 1.0 ‚Äúinto‚Äù a_random_number.\n\nUse read_csv() to read in hyderabad-sales-2023-june.csv, but now, assign it to the variable sales.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThree of the most common things to do when analyzing data is to:\n\nSummarize the data. For example, to sum up a column.\nFilter the data. For example, we might only want to look at the rows stamped with ‚ÄúSaturday‚Äù.\nGroup by some column (say the day of the week), and summarize each group.\n\nThe tidyverse have functions for all of these!\nThe function that helps you summarize is called ü•Åü•Åü•Å summarize! The first argument is the data frame to operate on, and every subsequent named argument defines a new summary. A bit abstract, maybe, but look at this:\n\nsummarize(sales, avg_sold_ice_creams = mean(sold_ice_creams))\n\n# A tibble: 1 √ó 1\n  avg_sold_ice_creams\n                &lt;dbl&gt;\n1                17.8\n\n\nThis takes the data frame sales and calculates the mean value of the column sold_ice_creams, and assigns it to a new column named avg_sold_ice_creams. The result is a new data frame with the summary (here just the single value).\n\nUse summarize() to calculate the total number of sold ice creams in sales.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLike many other tidyverse functions, summarize allows you to freely reference column names from the data frame. For example, if we just write:\n\nsum(sold_ice_creams)\n\nError: object 'sold_ice_creams' not found\n\n\nThen R will complain, and rightfully so, as sold_ice_creams is not an existing variable name. But when we write:\n\nsummarize(sales, n_sold_ice_creams = sum(sold_ice_creams))\n\n# A tibble: 1 √ó 1\n  n_sold_ice_creams\n              &lt;dbl&gt;\n1               534\n\n\nThen the summarize function knows to look among the columns in sales before complaining. Not all R functions are nice like this, but the tidyverse ones often are.\nThe tidyverse functions are also well suited to combine using the pipe operator |&gt;, so called because it takes data on the left and ‚Äúpipes it in‚Äù as the first argument in the function on the right. Instead of writing sum(1, 2, 3), one can go:\n\n1 |&gt; sum(2, 3)\n\n[1] 6\n\n\nSimilarly, as summarize() takes the data frame as the first arguments, this is two ways of writing the same thing:\n\n\nRewrite the expression to use the pipe operator (|&gt;), but it should still do the same thing.\n\n\n\nHow do I type a | (horisontal bar)?\n\nThis can be a bit tricky, depending on your keyboard. If you can‚Äôt figure it out, try searching for something like: \n\nHow to type vertical bar on a French|Swedish|Italian Mac|Windows keyboard?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere‚Äôs actually not really any point using |&gt; for simple statements, like the above, but it makes it much easier to compose complex data transformations. We‚Äôll get to that soon!\nFor now, let‚Äôs learn how to filter out the rows we want using the ü•Åü•Åü•Å filter function, which takes a data frame as the first argument, and then one or more logical expressions, and return only those rows that matches all expressions. For example, days that were warmer than 40¬∞ C:\n\nsales |&gt; filter(temp_max &gt; 40.0)\n\n# A tibble: 3 √ó 5\n  date       day_of_week temp_max sold_ice_creams sold_coffee\n  &lt;date&gt;     &lt;chr&gt;          &lt;dbl&gt;           &lt;dbl&gt;       &lt;dbl&gt;\n1 2023-06-02 Friday          40.6              22          21\n2 2023-06-03 Saturday        40.8              37          19\n3 2023-06-04 Sunday          42.4              35          13\n\n\nOr the data from the 1st of June, 2023:\n\nsales |&gt; filter(date == \"2023-06-01\")\n\n# A tibble: 1 √ó 5\n  date       day_of_week temp_max sold_ice_creams sold_coffee\n  &lt;date&gt;     &lt;chr&gt;          &lt;dbl&gt;           &lt;dbl&gt;       &lt;dbl&gt;\n1 2023-06-01 Thursday        38.9              13          17\n\n\nThere are many operators and functions that can be used in a logical expression, here are the most common ones:\n\n\n\nLogical operator\n\n\n\n\n\n==\nEqual to (yes, it‚Äôs == and not =)\n\n\n!=\nNot equal to\n\n\n&gt;\nGreater than\n\n\n&gt;=\nGreater than or equal to\n\n\n&lt;\nLess than\n\n\n&lt;=\nLess than or equal to\n\n\n\n\n\nReplace ______ with a filter() expression that keeps only the Saturday sales data.\n\nTip: When using == to compare strings, uppercase and lowercase letters are not equal. \"O_O\" == \"O_o\" is FALSE.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow comes the point of the pipe operator |&gt; ! Using it we can combine, or chain together, several statements. For example, if we wanted to read in a CSV file and calculate the median doughnuts sold on Mondays, we could squish it all into one single line:\n\nny_sales &lt;- read_csv(\"new-york-sales-2025-april.csv\")\nsummarize(filter(ny_sales, day_of_week == \"Monday\"), median_sold_doughnuts = median(sold_doughnuts))\n\nBut that‚Äôs pretty unreadable! An alternative is to do one step at a time, assigning each intermediate result to a variable:\n\nny_sales &lt;- read_csv(\"new-york-sales-2025-april.csv\")\nmonday_sales &lt;- filter(ny_sales, day_of_week == \"Monday\")\nmedian_monday_sales &lt;- summarize(\n  monday_sales, median_sold_doughnuts = median(sold_doughnuts)\n)\nmedian_monday_sales\n\nThat‚Äôs alright, I guess, but with the pipe operator |&gt; we can simplify this even further!\n\nny_sales &lt;- read_csv(\"new-york-sales-2025-april.csv\")\nny_sales |&gt; \n  filter(day_of_week == \"Monday\") |&gt; \n  summarize(median_sold_doughnuts = median(sold_doughnuts))\n\n# A tibble: 1 √ó 1\n  median_sold_doughnuts\n                  &lt;dbl&gt;\n1                  142.\n\n\nWhen using the |&gt; it‚Äôs common to have one function per line, with a two-space indent on all but the first line.\n\nCombine the two last exercises and write a statement using |&gt; that calculates the total number of ice creams we‚Äôve sold on Saturday in the sales data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n‚Ä¶\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n‚Ä¶\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGreat work! Now go to the next chapter.",
    "crumbs": [
      "3. Data files and data frames"
    ]
  },
  {
    "objectID": "playground.html",
    "href": "playground.html",
    "title": "R playground",
    "section": "",
    "text": "A playground where you can run any R code you want!",
    "crumbs": [
      "R playground"
    ]
  }
]