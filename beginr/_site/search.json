[
  {
    "objectID": "vectors-and-variables.html",
    "href": "vectors-and-variables.html",
    "title": "Vectors and variables",
    "section": "",
    "text": "Restart chapter \n\n\nLast chapter, we saw an example of a vector: a sequence of data of the same type, for example, a sequence of numbers or a sequence of strings. When analyzing data, you almost never deal with single numbers, and the reason you need to analyze the data in the first place is likely because there are heaps of it! That‚Äôs why handling sequences of strings and numbers is central to data analysis and why vectors are core to R.\nLet me show you how central vectors are to R.\n\nType any number in the box below and press ‚ñ∂ Run Code.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBut it‚Äôs not just a number. It‚Äôs actually a one-item vector with a single number. In R, even single numbers are vectors.\nSometimes, you would want to create new vectors longer than a single number. This can be done using the c() function that combines many values. For example, c(2, 3, 5, 7, 9) will create a numeric vector with all prime numbers between 1 and 10.\n\nCreate a numeric vector using c() with at least 5 items. (By the way, I‚Äôll check if any of them are prime numbers.)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are many functions that help you create vectors in R, one shortcut is the colon operator where, say, 10:30 would create the vector 10, 11, 12, ..., 28, 29, 30.\n\nUse the colon : operator to create the vector 1, 2, 3, ..., 98, 99, 100. (I‚Äôll, again, figure out which are prime.)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMany functions in R are vectorized, that is, they work both on single values, as well as vectors. For example, nchar(\"pizza\") returns 5, the number of characters in \"pizza\". But nchar() also works on vectors of strings.\n\nUse nchar() to count the number of characters in each word.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd, especially, all math operators (+, *, etc.) are vectorized. That is, 1:3 * 5 would give you 5, 10, 15.\n\nMake the below output the vector c(15, 25, 35, 45, 55, 65, 75, 85, 95, 105) by only changing the numbers in * 1 + 0 (leave 1:10 alone!)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen doing math with two vectors of the same length, the operation will be applied to each corresponding pair of values. It‚Äôs easier than it sounds. For example, c(10, 20, 30) + c(1, 2, 3) gives 11, 22, 33 and 11:14 - 1:4 gives 10, 10, 10, 10.\n\nChange the code below to subtract the expenses from the quarterly sales to get the quarterly profit.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMoving around the numbers directly, like you did above, can work, but it gets messy. It can be made more organized by assigning the values to variables. This needs explanation, but first, let‚Äôs look at an example:\npi &lt;- 3.141593\nHere we‚Äôre taking the value (3.141593) and by using &lt;-, the assignment operator, we‚Äôre assigning it to (‚Äúputting it into‚Äù) a variable named pi. Now, instead of writing 2 * 3.141593 * 5, we can write 2 * pi * 5. The assignment operator is made up of a &lt; and a -, and is meant to look like a left-pointing arrow.\nVariables can be given both short and long names, but they can‚Äôt include spaces. Instead, it‚Äôs common to use underscores (_) to separate words in longer names.\n\nAgain, calculate the quarterly profit. But this time by replacing the ______ placeholder and assigning the result to the variable quarterly_profit.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVariables need to be assigned before they can be used. This won‚Äôt work:\ny &lt;- x + 1  # won't work as x doesn't exist at this point!\nx &lt;- 1\nHowever, variable names can be reused and ‚Äúoverwritten‚Äù. For example, this is okay:\nx &lt;- 10\nx &lt;- x + 1\nx &lt;- x + 1\nx &lt;- x + 1\n\nBut what would now be the value of x? Write it in the box below and press ‚ñ∂ Run Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHere‚Äôs some more sales data for you!\nc(13, 22, 37, 35, 9, 16, 19, 18, 15, 37,\n  30, 12, 14, 14, 16, 11, 33, 31, 19, 17,\n  15, 7, 15, 23, 12, 5, 7, 9, 9, 14)\nThis is the number of sold ice cream cones at my cafe in Hyderabad, India for each day in June 2023. (As opposed to the Hyderabadi temperature data we looked at last chapter, this data is unfortunately made up.)\n\nCopy the ice cream sales data to the code box below and assign it to the variable sold_ice_creams.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnother thing one can do with a vector is to subset it using the square brackets operator ([]). For example, here‚Äôs how you would pick out the 1st value in sold_ice_creams:\nsold_ice_creams[1]\n[1] 13\n\nPick out the 2nd value in sold_ice_creams.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou can also subset a range of values using the colon operator. For example, this would pick out the first three days of sales:\nsold_ice_creams[1:3]\n[1] 13 22 37\n\nPick out the first seven days of sales from sold_ice_creams.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA subset of a vector can be used as any other vector. For example, this here would calculate the median sales for the first week in June:\nmedian(sold_ice_creams[1:7])\n[1] 19\n\nUse the sum() function to calculated the total sales for the first week in sold_ice_creams.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAs a last thing, let‚Äôs bring in the daily max temperature data from last chapter. Again, I‚Äôve put that into the temp variable.\nNow, the plot() function can make simple scatter plots that show two numeric vectors against each other. For example, here‚Äôs how one would plot age against height:\nplot(x = age, y = height)\nLet‚Äôs look at the relationship between the temperature and ice cream sales.\n\nMake a scatter plot with temp on the x-axis and sold_ice_creams on the y-axis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou‚Äôve completed the chapter, great work!\nSo the plot above is correct because the values in temp and sold_ice_creams vectors line up. But, rather than juggling several related vectors, wouldn‚Äôt it be better to stick them all into something like a spreadsheet or table?\nYes it would! And that‚Äôs what this next chapter is all about: üëâ3. Data files and data framesüëà",
    "crumbs": [
      "2. Vectors and variables"
    ]
  },
  {
    "objectID": "and-all-the-rest.html",
    "href": "and-all-the-rest.html",
    "title": "And all the rest",
    "section": "",
    "text": "Restart chapter \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGreat work! Now go to the next chapter.",
    "crumbs": [
      "5. And all the rest"
    ]
  },
  {
    "objectID": "visualization.html",
    "href": "visualization.html",
    "title": "Visualization",
    "section": "",
    "text": "Restart chapter \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGreat work! Now go to the next chapter.",
    "crumbs": [
      "4. Visualization"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R starts here!",
    "section": "",
    "text": "Restart chapter \n\n\nR is a powerful programming language that excels at data analysis and statistics. But really, it can do almost anything!\nBut let‚Äôs start simple: Out-of-the-box R can do everything you‚Äôd expect a calculator to do. Here‚Äôs a code cell where you can put in any R code you want.\n\nBut for now, just add two numbers together and press ‚ñ∂ Run Code.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFriends of +, like -, /, and * work as expected. R also includes a large number of mathematical functions, like log(), exp(), and sqrt(). To call a function you write its name followed by the argument between parentheses, like log(2.72) or sin(1.57).\n\nCalculate the square root of 1764 using sqrt().\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunctions can have more than one argument, which, are, then, separated, by, commas. For example, max(1, 3, 5, 4, 2) returns the highest of it‚Äôs arguments: 5. Another function that can take many arguments is sum().\n\nUse sum() to sum up several large numbers, I don‚Äôt care which, but they should total more than 1,000,000!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR can work with more than numbers and there are many other types of data, or data types, in R. A piece of text, often called a string, is written by putting the text ‚Äúinto quotes‚Äù.\n\nTry writing a string, any string, in the code cell below. I‚Äôll repeat it three times.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLike with numbers, you can also apply functions to strings. For example, tolower() turns all characters into lower case.\n\nWe‚Äôre in a library. Use tolower() on the string to get the upset person to calm down.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd, of course, there are functions that take both numbers and strings as arguments. But the order of the arguments is important! For example, for rep() the first argument is the value to repeat, and the second argument is the number of repetitions.\n\nRepeat a moderately dirty word a 100 times using rep().\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt might not be obvious, but the result above is actually a list of 100 strings. That‚Äôs why there are [ ] with numbers showing the index of the right-most elements. In R, lists where all elements are of the same data type are called vectors (to confuse you, there‚Äôs also something else called a list in R, but that‚Äôs for another time).\nI‚Äôve gone ahead and created a numeric vector for you. It‚Äôs called temp and contains the max C¬∞ temperature in Hyderabad, India for each day in June 2023 (source). In R you can print out a representation of whatever you want to look at by simply writing its name.\n\nTake a look at the data in temp.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBut, there are 30 days in June, right? Are there really 30 temperatures in temp?\n\nUse the length() function to count the number of elements in temp.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd what was the highest temperature in Hyderabad in June 2023?\n\nUse max() to get the highest value in temp.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBut it wasn‚Äôt 42.4 C¬∞ every day, I hope. What was the mean temperature?\n\nUse, you guessed it, mean() to get the mean/average of temp\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAs you‚Äôve seen, there are many things you can do, once you‚Äôve gotten some data into R. One thing that‚Äôs always nice to do with new data is to plot it!\n\nUse plot() to make a simple time-series plot of temp.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR is great for making beautiful plots, but that usually takes a bit more effort. But, as the last exercise in this chapter, let‚Äôs spiff up this plot, just a little bit!\nMany functions in R can be given optional arguments, and plot() has many that change the appearance of the plot. Arguments to a function can also be given in the form the_argument_name = \"the value\", and then the argument order doesn‚Äôt matter anymore.\n\nFor the plot arguments below, replace ______ between the \"\" to your liking.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGreat work! Now on to üëâChapter 2: Vectors and variablesüëà",
    "crumbs": [
      "1. R starts here!"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is a short 1-2h introduction to the R programming language and was made by me, Rasmus B√•√•th. It‚Äôs aimed at people who never tried out R before and is meant to give you a feeling for what programming in R is and what R can do. If you use it in a course, please do send me a message (rasmus.baath@gmail.com) and let me know how it went.\nThis introduction was made possible thanks to the quarto, webr, and quarto-live projects. The full source code can be found on GitHub.",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "data-files-and-data-frames.html",
    "href": "data-files-and-data-frames.html",
    "title": "Data files and data frames",
    "section": "",
    "text": "Restart chapter \n\n\nLast chapter we learned about vectors: sequences of numbers or strings. But if you ever worked with data, you know that data usually doesn‚Äôt get e-mailed to you as a vector, it comes as a table or spreadsheet. Tables are also the most common way to work with data in R, and in this chapter we‚Äôll learn more about that.\nThe first thing we‚Äôll learn is that, in R, tables are called data frames. There‚Äôs many ways to create data frames and one basic way is to stick some vectors in the data.frame() function. For example, data.frame(x, y, z) would create a data frame that included the data from vectors x, y, and z as columns.\n\nReplace the ______ placeholder with a data frame with columns quarter, revenue, and expenses and assign it to the variable finances. Then, press ‚ñ∂ Run Code.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBut, let‚Äôs have a look, just to be sure!  (Remember that you can print out the contents of a variable by just writing its name.)\n\nTake a look at the contents of finances.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCompared to a spreadsheet, data frames are less flexible. They typically only have column names, no row names, and you certainly can‚Äôt color the cells.\nOne good way to think of data frames are as a list of vectors, each vector being a column. You can ‚Äúget out‚Äù or access the vectors in a data frame using the $ operator. For example, finances$quarter would be the vector c(\"Q1\", \"Q2\", \"Q3\", \"Q4\").\n\nThe code below adds the column/vector profit to finaces. Use the sum() function to sum up the profit for all quarters.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n‚Ä¶\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n‚Ä¶\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n‚Ä¶\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n‚Ä¶\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n‚Ä¶\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGreat work! Now go to the next chapter.",
    "crumbs": [
      "3. Data files and data frames"
    ]
  },
  {
    "objectID": "playground.html",
    "href": "playground.html",
    "title": "R playground",
    "section": "",
    "text": "A playground where you can run any R code you want!",
    "crumbs": [
      "R playground"
    ]
  }
]