---
title: "Vectors and variables"
format: 
  live-html:
    webr:
      cell-options:
        startover: false
        completion:	false
---

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}
{{< include _restart_chapter_button.qmd >}}

:::: {.instructions-and-exercise exercise="ex1"}

Last chapter, we saw an example of a _vector_: a sequence of data of the same type, for example, a sequence of numbers or a sequence of strings. When analyzing data, you almost never deal with single numbers, and the reason you need to analyze the data in the first place is likely because there are heaps of it! That's why handling sequences of strings and numbers is central to data analysis and why vectors are core to R.

Let me show you how central vectors are to R. 

<div class="task-callout">Type **any** number in the box below and press **â–¶ Run Code**.</div>

```{webr}
#| exercise: ex1
#| caption: "ðŸ‘‡ Enter R code in this box below ðŸ‘‡" 

```

```{webr}
#| exercise: ex1
#| check: true

if(is.numeric(.result) && grepl("\\d", .user_code)) {
  list(correct = TRUE, message = "That sure looks like a number!")
} else {
  list(correct = FALSE, message = "Try again! Just type any number (and nothing else) in the textbox.")
}
```



::::
:::: {.instructions-and-exercise exercise="ex2"}

But it's *not* just a number. It's actually a one-item vector with a single number. In R, even single numbers are vectors. 

Sometimes, you would want to create new vectors longer than a single number. This can be done using the `c()` function that `c`ombines many values. For example, `c(2, 3, 5, 7, 9)` will create a numeric vector with all prime numbers between 1 and 10. 

<div class="task-callout">Create a numeric vector using `c()` with at least 5 items. (By the way, I'll check if any of them are prime numbers.)</div>

```{webr}
#| setup: true
#| exercise: ex2

# From here: https://stackoverflow.com/a/23266245/
is_prime <- Vectorize(\(n) n >= 2 && (n == 2L || all(n %% 2L:ceiling(sqrt(n)) != 0)))
```

```{webr}
#| exercise: ex2
#| envir: primes

```

```{webr}
#| exercise: ex2
#| check: true

if(is.numeric(.result) && grepl("c", .user_code) && length(.result) >= 5) {
  prime_numbers <- .result[is_prime(.result)]
  success_message <- if(length(prime_numbers) == 0) {
    "A vector of numbers, for sure! But no prime numbers in sight..." 
  } else {
    paste("Nice! I spy the following prime numbers: ", paste(prime_numbers, collapse = ", "))
  }
  list(correct = TRUE, message = success_message)
} else {
  list(correct = FALSE, message = "Not quite. Just try writing something like c(1, 4, 12), but with 2 more numbers.")
}
```

::::
:::: {.instructions-and-exercise exercise="ex3"}

There are many functions that help you create vectors in R, one shortcut is the colon operator where, say, `10:30` would create the vector `10, 11, 12, ..., 28, 29, 30`.

<div class="task-callout">Use the colon `:` operator to create the vector `1, 2, 3, ..., 98, 99, 100`. (I'll, again, figure out which are prime.)</div>

```{webr}
#| exercise: ex3
#| envir: primes

```

```{webr}
#| exercise: ex3
#| check: true

if(is.numeric(.result) && grepl(":", .user_code) && all(.result == 1:100)) {
  prime_numbers <- .result[is_prime(.result)]
  list(correct = TRUE, message = paste("So many primes! Here goes: ", paste(prime_numbers, collapse = ", ")))
} else {
  list(correct = FALSE, message = "Nope. For example, 1:5 would give you 1, 2, 3, 4, 5. But now you want 1 to a 100...")
}
```

::::
:::: {.instructions-and-exercise exercise="ex4"}

Many functions in R are _vectorized_, that is, they work both on single values, as well as vectors. For example, `nchar("pizza")` returns `5`, the `n`umber of `char`acters in `"pizza"`. But `nchar()` also works on vectors of strings.  

<div class="task-callout">Use `nchar()` to count the number of characters in each word.</div>

```{webr}
#| exercise: ex4
#| startover: true
c("I", "go", "eat", "some", "tasty", "pizzas", "tonight")
```

```{webr}
#| exercise: ex4
#| check: true

if(is.numeric(.result) && grepl("nchar", .user_code) && all(.result == 1:7)) {
  list(correct = TRUE, message = "Cowabunga!")
} else {
  list(correct = FALSE, message = 'Not quite. For example, nchar(c("I", "like",  "pizza")) would give you 1, 4, 5')
}
```

::::
:::: {.instructions-and-exercise exercise="ex5"}

And, especially, all math operators (`+`, `*`, etc.) are vectorized. That is, `1:3 * 5` would give you `5, 10, 15`.

<div class="task-callout">Make the below output the vector `c(15, 25, 35, 45, 55, 65, 75, 85, 95, 105)` by only changing the numbers in `* 1 + 0` (leave `1:10` alone!)   </div>

```{webr}
#| exercise: ex5
#| startover: true
1:10 * 1 + 0
```

```{webr}
#| exercise: ex5
#| check: true

if(is.numeric(.result) && grepl("1:10", .user_code) && all(.result == 1:10 * 10 + 5)) {
  list(correct = TRUE, message = "Vectoramazing!")
} else {
  list(correct = FALSE, message = "Try again! Tip: 1:10 * 10 + 2 would give you 12, 22, 32, 42, 52, etc.")
}
```

::::
:::: {.instructions-and-exercise exercise="ex6"}

When doing math with two vectors of the same length, the operation will be applied to each corresponding pair of values. It's easier than it sounds. For example, `c(10, 20, 30) + c(1, 2, 3)` gives `11, 22, 33` and `11:14 - 1:4` gives `10, 10, 10, 10`. 

<div class="task-callout">Change the code below to subtract the expenses from the quarterly sales to get the quarterly revenue.</div>

```{webr}
#| exercise: ex6
#| startover: true
# Quarterly sales
c(120, 150, 78, 154)

# Quarterly expenses
c(106, 122, 96, 98)
```

```{webr}
#| exercise: ex6
#| check: true

quarterly_revenue <- c(120, 150, 78, 154) - c(106, 122, 96, 98)

correct_results <- Filter(
  \(x) inherits(x, "result") && is.numeric(x$value) && all(x$value == quarterly_revenue),
  .evaluate_result
)

if(length(correct_results) >= 1) {
  list(correct = TRUE, message = "Yes! A weak Q3, but we made up for it with the strong Q4!")
} else {
  list(correct = FALSE, message = "Not quite. Like this, c(1, 2, 3) - c(5, 2, 7), but with the correct numbers.") 
}
```

::::
:::: {.instructions-and-exercise exercise="ex7"}

Moving around the numbers directly, like you did above, _can_ work, but it gets messy. 
It can be made more organized by _assigning_ the values to _variables_. This needs explanation, but first, let's look at an example:

```r
pi <- 3.141593
```

Here we're taking the value (`3.141593`) and by using `<-`, the assignment operator, we're assigning it to ("putting it into") a variable named `pi`. Now, instead of writing `2 * 3.141593 * 5`, we can write `2 * pi * 5`. The assignment operator is made up of a `<` and a `-`, and is meant to look like a left-pointing arrow.

Variables can be given both short and long names, but they can't include spaces. Instead, it's common to use underscores (`_`) to separate words in longer names.

<div class="task-callout">Again, calculate the quarterly revenue. But this time by replacing the `______` placeholder and assigning the result to the variable `quarterly_revenue`.</div>

```{webr}
#| exercise: ex7
#| startover: true
quarterly_sales <- c(120, 150, 78, 104)
quarterly_expenses <- c(106, 112, 96, 98)
quarterly_revenue <- ______

quarterly_revenue # This is here just to print out quarterly_revenue
```

```{webr}
#| exercise: ex7
#| check: true

quarterly_sales <- c(120, 150, 78, 104)
quarterly_expenses <- c(106, 112, 96, 98)
quarterly_revenue <- quarterly_sales - quarterly_expenses

if(is.numeric(.envir_result$quarterly_revenue) && all(.envir_result$quarterly_revenue == quarterly_revenue)) {
  list(correct = TRUE, message = "Yes! Still a weak Q3, but now much prettier code.")
} else {
  list(correct = FALSE, message = "Try again! Tip: z <- x - y would create the new variable z. In your code, make sure that you keep the name quarterly_revenue .") 
}
```

::::
:::: {.instructions-and-exercise exercise="ex8"}

Variables need to be assigned before they can be used. This won't work:

```r
y <- x + 1  # won't work as x doesn't exist at this point!
x <- 1
```

However, variable names can be reused and "overwritten". For example, this is okay:

```r
x <- 10
x <- x + 1
x <- x + 1
x <- x + 1
```

<div class="task-callout">But what would now be the value of `x`? Write it in the box below and press **â–¶ Run Code**</div>

```{webr}
#| exercise: ex8

```

```{webr}
#| exercise: ex8
#| check: true

x <- 10
x <- x + 1
x <- x + 1
x <- x + 1

if(is.numeric(.result) && .result == x) {
  list(correct = TRUE, message = "Yep! For each x <- x + 1, the value of x increases by 1.")
} else {
  list(correct = FALSE, message = "Not quite! For each x <- x + 1, the value of x increases by 1.")
}
```

::::

:::: {.instructions-and-exercise exercise="ex9"}

Here's some more sales data for you!

```r
c(13, 22, 37, 35, 9, 16, 19, 18, 15, 37,
  30, 12, 14, 14, 16, 11, 33, 31, 19, 17,
  15, 7, 15, 23, 12, 5, 7, 9, 9, 14)
```

This is the number of sold ice cream cones at my cafe in Hyderabad, India for each day in June 2023. (As opposed to the Hyderabadi temperature data we looked at last chapter, this data is unfortunately made up.)

<div class="task-callout">Copy the ice cream sales data to the code box below and assign it to the variable `sold_ice_creams`.</div>

```{webr}
#| exercise: ex9

```

```{webr}
#| exercise: ex9
#| check: true

sold_ice_creams <- c(
  13, 22, 37, 35, 9, 16, 19, 18, 15, 37,
  30, 12, 14, 14, 16, 11, 33, 31, 19, 17,
  15, 7, 15, 23, 12, 5, 7, 9, 9, 14
)

if(is.numeric(.envir_result$sold_ice_creams) && all(.envir_result$sold_ice_creams == sold_ice_creams)) {
  list(correct = TRUE, message = "Great! Now sold_ice_creams can be used in the following exercises.")
} else {
  list(correct = FALSE, message = "Try again! For example, sold_ice_creams <- c(1, 2, 3) would create the right variable, but with the wrong data. Make sure you get the name exactly right, in all lowercase.") 
}
```

::::
:::: {.instructions-and-exercise exercise="ex10"}

Another thing one can do with a vector is to _subset_ it using the square brackets operator (`[]`). For example, here's how you would pick out the 1st value in `sold_ice_creams`:

```r
sold_ice_creams[1]
```

```
[1] 13
```


<div class="task-callout">Pick out the 2nd value in `sold_ice_creams`.</div>

```{webr}
#| setup: true
#| exercise: ex10
temp <- c(
  38.9, 40.6, 40.8, 42.4, 38.1, 37.6, 39.6, 40, 39.7, 39.7, 39.2, 
  37.8, 38.8, 39.4, 39.1, 38.6, 39.4, 39, 39.2, 37.8, 38.8, 38.9, 
  36, 33.2, 31.8, 30.8, 31.2, 31.6, 32.8, 32.7
)

sold_ice_creams <- c(
  13, 22, 37, 35, 9, 16, 19, 18, 15, 37,
  30, 12, 14, 14, 16, 11, 33, 31, 19, 17,
  15, 7, 15, 23, 12, 5, 7, 9, 9, 14
)
```

```{webr}
#| exercise: ex10
#| envir: ice_cream_sales

```

```{webr}
#| exercise: ex10
#| check: true

if(is.numeric(.result) && all(.result == sold_ice_creams[2])) {
  list(correct = TRUE, message = "Aha! Seems we sold much better on the 2nd day compared to the 1st.")
} else {
  list(correct = FALSE, message = "Hmmm... So sold_ice_creams[1] would be the 1st value and sold_ice_creams[3] would be the 3rd value...")
}
```

::::
:::: {.instructions-and-exercise exercise="ex11"}

You can also subset a range of values using the colon operator. For example, this would pick out the first three days of sales:

```r
sold_ice_creams[1:3]
```

```
[1] 13 22 37
```


<div class="task-callout">Pick out the first seven days of sales from `sold_ice_creams`.</div>

```{webr}
#| exercise: ex11
#| envir: ice_cream_sales

```

```{webr}
#| exercise: ex11
#| check: true

if(is.numeric(.result) && all(.result == sold_ice_creams[1:7])) {
  list(correct = TRUE, message = "Ok! Seems like sales varied quite a lot during the first week in June.")
} else {
  list(correct = FALSE, message = "Try once more! Make sure the variable name and the placement of the brackets are correct.")
}
```

::::
:::: {.instructions-and-exercise exercise="ex12"}

A subset of a vector can be used as any other vector. For example, this here would calculate the median sales for the first week in June:

```r
median(sold_ice_creams[1:7])
```

```
[1] 19
```

<div class="task-callout">Use the `sum()` function to calculated the total sales for the first week in `sold_ice_creams`.</div>

```{webr}
#| exercise: ex12
#| envir: ice_cream_sales

```

```{webr}
#| exercise: ex12
#| check: true

if(is.numeric(.result) && .result == sum(sold_ice_creams[1:7])) {
  list(correct = TRUE, message = "Cool! Sweet! nICE! Ok, ok, I'll chill with the puns.")
} else {
  list(correct = FALSE, message = "Nope. So, median(sold_ice_creams[1:7]) gives you the median sales. Now, just replace median with sum.")
}
```

::::
:::: {.instructions-and-exercise exercise="ex13"}

As a last thing, let's bring in the daily max temperature data from last chapter. Again, I've put that into the `temp` variable. 

Now, the `plot()` function can make simple scatter plots that show two numeric vectors against each other. For example, here's how one would plot `age` against `height`:

```r
plot(x = age, y = height)
```

Let's look at the relationship between the temperature and ice cream sales.

<div class="task-callout">Make a scatter plot with `temp` on the x-axis and `sold_ice_creams` on the y-axis.</div>

```{webr}
#| exercise: ex13
#| envir: ice_cream_sales

```

```{webr}
#| exercise: ex13
#| check: true

errors <- Filter(\(x) inherits(x, "error"), .evaluate_result)
if(length(errors) == 0 && is.null(.result) && grepl("plot", .user_code) && grepl("temp", .user_code) && grepl("sold_ice_creams", .user_code)) {
  list(correct = TRUE, message = "Ok! Seems like there might be some relationship here to dig into.")
} else {
  list(correct = FALSE, message = "Don't give up! Use the plot() example above, but replace the variable names.")
}
```

::::

:::: {.completed-chapter-instructions}

You've completed the chapter, great work! 

So the plot above is correct because the values in `temp` and `sold_ice_creams` vectors line up. But, rather than juggling several related vectors, wouldn't it be better to stick them all into something like a spreadsheet or table? 

Yes it would! And that's what this next chapter is all about: ðŸ‘‰[3. Data files and data frames](/data-files-and-data-frames.html)ðŸ‘ˆ

::::