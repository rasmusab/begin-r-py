---
title: "Data files and data frames"
format: 
  live-html:
    webr:
      cell-options:
        startover: false
        completion:	false
---

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}
{{< include _restart_chapter_button.qmd >}}

:::: {.instructions-and-exercise exercise="ex1"}

Last chapter we learned about vectors: sequences of numbers or strings. But if you ever worked with data, you know that data usually doesn't get e-mailed to you as a vector, it comes as a table or spreadsheet. Tables are also the most common way to work with data in R, and in this chapter we'll learn more about that.

The first thing we'll learn is that, in R, tables are called _data frames_. There's many ways to create data frames and one basic way is to stick some vectors in the `data.frame()` function. For example, `data.frame(x, y, z)` would create a data frame that included the data from vectors `x`, `y`, and `z` as columns.

<div class="task-callout">Replace the `______` placeholder with a data frame with columns `quarter`, `revenue`, and `expenses` and assign it to the variable `finances`. Then, press **â–¶ Run Code**.</div>

```{webr}
#| exercise: ex1
#| envir: finances
#| startover: true
quarter = c("Q1", "Q2", "Q3", "Q4")
revenue <- c(120, 150, 78, 104)
expenses <- c(106, 112, 96, 98)
finances <- ______
```

```{webr}
#| exercise: ex1
#| check: true

finances <- data.frame(quarter, revenue, expenses)

if(
  is.data.frame(.envir_result$finances) && 
  all(.envir_result$finances$quarter == finances$quarter) &&
  all(.envir_result$finances$revenue == finances$revenue) &&
  all(.envir_result$finances$expenses == finances$expenses)
) {
  list(correct = TRUE, message = "Seems like we have our finances in order!")
} else {
  list(correct = FALSE, message = "Try again! For example, finances <- data.frame(quarter, revenue) would create a data frame with two columns. Just add the missing expenses!")
}
```

::::
:::: {.instructions-and-exercise exercise="ex2"}

But, let's have a look, just to be sure! <br> (Remember that you can print out the contents of a variable by just writing its name.)

<div class="task-callout">Take a look at the contents of `finances`.</div>

```{webr}
#| exercise: ex2
#| envir: finances

```

```{webr}
#| exercise: ex2
#| check: true

if(is.data.frame(.result)) {
  list(correct = TRUE, message = "Confirmed! Finances are in order.")
} else {
  list(correct = FALSE, message = "Just write out the name of the variable you want to inspect, which in this cases is finances.")
}
```


::::
:::: {.instructions-and-exercise exercise="ex3"}

Compared to a spreadsheet, data frames are less flexible. They typically only have column names, no row names, and you certainly <span style="background-color: red;">can't</span> <span style="background-color: lightblue;">color</span> <span style="background-color: springgreen;">the</span> <span style="background-color: yellow;">cells</span>.

One good way to think of data frames are as a list of vectors, each vector being a column. You can "get out" or _access_ the vectors in a data frame using the `$` operator. For example, `finances$quarter` would be the vector `c("Q1", "Q2", "Q3", "Q4")`.

<div class="task-callout">The code below adds the column/vector `profit` to `finaces`. Use the `sum()` function to sum up the `profit` for all quarters.</div>

```{webr}
#| exercise: ex3
#| envir: finances
#| startover: true
#| min-lines: 3
finances$profit <- finances$revenue - finances$expenses
 
 
```

```{webr}
#| exercise: ex3
#| check: true

finances$profit <- finances$revenue - finances$expenses

if(is.numeric(.result) && grepl("sum", .user_code) && .result == sum(finances$profit)) {
  list(correct = TRUE, message = "Perfect! The board will be pleased.")
} else {
  list(correct = FALSE, message = "Something is wrong. A tip: sum(finances$expenses) would sum up the expenses. Make sure you put the code that sums the profit last in the code cell above.")
}
```

::::
:::: {.instructions-and-exercise exercise="ex4"}


<div class="task-callout">...</div>

```{webr}
#| exercise: ex4

```

```{webr}
#| exercise: ex4
#| check: true

if(is.numeric(.result) && grepl("sum", .user_code)) {
  list(correct = TRUE, message = "Ok!")
} else {
  list(correct = FALSE, message = "Try again!")
}
```

::::
:::: {.instructions-and-exercise exercise="ex5"}


<div class="task-callout">...</div>

```{webr}
#| exercise: ex5

```

```{webr}
#| exercise: ex5
#| check: true

if(is.numeric(.result) && grepl("sum", .user_code)) {
  list(correct = TRUE, message = "Ok!")
} else {
  list(correct = FALSE, message = "Try again!")
}
```

::::
:::: {.instructions-and-exercise exercise="ex6"}


<div class="task-callout">...</div>


```{webr}
#| exercise: ex6

```

```{webr}
#| exercise: ex6
#| check: true

if(is.numeric(.result) && grepl("sum", .user_code)) {
  list(correct = TRUE, message = "Ok!")
} else {
  list(correct = FALSE, message = "Try again!")
}
```

::::
:::: {.instructions-and-exercise exercise="ex7"}


<div class="task-callout">...</div>


```{webr}
#| exercise: ex7

```

```{webr}
#| exercise: ex7
#| check: true

if(is.numeric(.result) && grepl("sum", .user_code)) {
  list(correct = TRUE, message = "Ok!")
} else {
  list(correct = FALSE, message = "Try again!")
}
```

::::
:::: {.instructions-and-exercise exercise="ex8"}


<div class="task-callout">...</div>


```{webr}
#| exercise: ex8

```

```{webr}
#| exercise: ex8
#| check: true

if(is.numeric(.result) && grepl("sum", .user_code)) {
  list(correct = TRUE, message = "Ok!")
} else {
  list(correct = FALSE, message = "Try again!")
}
```

::::

:::: {.completed-chapter-instructions}

Great work! Now go to the next chapter.

::::