---
title: "Data files and data frames"
format: 
  live-html:
    webr:
      cell-options:
        startover: false
        completion: false
      packages:
        - tidyverse
resources:
  - "hyderabad-sales-2023-june.csv"
---

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}
{{< include _restart_chapter_button.qmd >}}

:::: {.instructions-and-exercise exercise="ex1"}

Last chapter, we learned about vectors: sequences of numbers or strings. But if you've ever worked with data, you know that data usually doesn't get emailed to you as a vector, it comes as a table or spreadsheet. Tables are also the most common way to work with data in R, and in this chapter, we'll learn more about that.

The first thing we'll learn is that, in R, tables are called _data frames_. There are many ways to create data frames, and one basic way is to stick some vectors in the `data.frame()` function. For example, `data.frame(x, y, z)` would create a data frame that includes the data from vectors `x`, `y`, and `z` as columns.

<div class="task-callout">Replace the `______` placeholder with a data frame with columns `quarter`, `revenue`, and `expenses`, and assign it to the variable `finances`. Then, press **▶ Run Code**.</div>

_It can take up to a minute for R to start up here, so please be patient._

```{r}
#| echo: false
#| warning: false
#| message: false
library(tidyverse)
sales <- read_csv("hyderabad-sales-2023-june.csv")
```

```{webr}
#| exercise: ex1
#| envir: finances
#| startover: true
quarter = c("Q1", "Q2", "Q3", "Q4")
revenue <- c(120, 150, 78, 104)
expenses <- c(106, 112, 96, 98)
finances <- ______
```

```{webr}
#| exercise: ex1
#| check: true

finances <- data.frame(quarter, revenue, expenses)

if(
  is.data.frame(.envir_result$finances) && 
  all(.envir_result$finances$quarter == finances$quarter) &&
  all(.envir_result$finances$revenue == finances$revenue) &&
  all(.envir_result$finances$expenses == finances$expenses)
) {
  list(correct = TRUE, message = "Seems like we have our finances in order!")
} else {
  list(correct = FALSE, message = "Try again! For example, finances <- data.frame(quarter, revenue) would create a data frame with two columns. Just add the missing expenses!")
}
```

::::
:::: {.instructions-and-exercise exercise="ex2"}

But let's have a look, just to be sure! <br> (Remember that you can print out the contents of a variable by just writing its name.)

<div class="task-callout">Take a look at the contents of `finances`.</div>

```{webr}
#| exercise: ex2
#| envir: finances

```

```{webr}
#| exercise: ex2
#| check: true

if(is.data.frame(.result)) {
  list(correct = TRUE, message = "Confirmed! Finances are in order.")
} else {
  list(correct = FALSE, message = "Just write out the name of the variable you want to inspect, which in this case is finances.")
}
```

::::
:::: {.instructions-and-exercise exercise="ex3"}

Compared to a spreadsheet, data frames are less flexible. They typically only have column names, no row names, and you certainly <span style="background-color: red;">can't</span> <span style="background-color: lightblue;">color</span> <span style="background-color: springgreen;">the</span> <span style="background-color: yellow;">cells</span>. But the lack of flexibility also means that data frames are more predictable and easier to program with than spreadsheets. 

One good way to think of data frames is as a collection of vectors, each vector being a column. You can "get out" or _access_ the vectors in a data frame using the `$` operator. For example, `finances$quarter` would be the vector `c("Q1", "Q2", "Q3", "Q4")`.

<div class="task-callout">The code below adds the column/vector `profit` to `finances`. Replace the `______` placeholder and use the `sum()` function to sum up the `profit` for all quarters.</div>

```{webr}
#| exercise: ex3
#| envir: finances
#| startover: true
#| min-lines: 3
finances$profit <- finances$revenue - finances$expenses
______
```

```{webr}
#| exercise: ex3
#| check: true

finances$profit <- finances$revenue - finances$expenses

if(is.numeric(.result) && grepl("sum", .user_code) && .result == sum(finances$profit)) {
  list(correct = TRUE, message = "Perfect! The board will be pleased.")
} else {
  list(correct = FALSE, message = "Something is wrong. A tip: sum(finances$expenses) would sum up the expenses. Make sure you put the code that sums the profit last in the code cell above.")
}
```

::::
:::: {.instructions-and-exercise exercise="ex4"}

But now we're at a crossroads. R is an old programming language (most likely older than you!), and over the years, people have come up with different ways to compute on and manipulate data in R. In this tutorial, we have to decide which way to go. And I've already made up my mind here.

On account of it being intuitive, powerful, and popular, we're going to use the `tidyverse` packages to work with data in R. A _package_ is, well, a package of new functions and functionality that can be added to R. The `tidyverse` is a collection of packages for data manipulation, visualization, etc., that work well together.

To use a package, you pull it out of your library of installed packages using the `library()` function.

<div class="task-callout">Start using the tidyverse by running `library(tidyverse)`.<br>
</div>

```{webr}
#| setup: true
#| exercise: ex4
packages_to_unload <- c(
  "tidyr", "dplyr", "readr", "forcats", "stringr", "ggplot2", 
  "lubridate", "purrr", "tibble", "tidyverse"
)

unload_package <- \(pkg) {
  if (paste0("package:", pkg) %in% search()) {
    detach(paste0("package:", pkg), unload = TRUE, character.only = TRUE)
  }
}

sapply(packages_to_unload , unload_package)
```

```{webr}
#| exercise: ex4

```

```{webr}
#| exercise: ex4
#| check: true

if("tidyverse" %in% loadedNamespaces()) {
  list(correct = TRUE, message = "The tidyverse is loaded and ready to use!")
} else {
  list(correct = FALSE, message = "Just write library(tidyverse) and click 'run'")
}
```

::::
:::: {.instructions-and-exercise exercise="ex5"}

One of the many useful functions in the `tidyverse` is `read_csv()`. It can be used to read data frames from _comma separated value_ (CSV) files, a simple text format for storing tabular data. Here's the first four lines from the CSV file `hyderabad-sales-2023-june.csv`:

```
date,day_of_week,temp_max,sold_ice_creams,sold_coffee
2023-06-01,Thursday,38.9,13,17
2023-06-02,Friday,40.6,22,21
2023-06-03,Saturday,40.8,37,19
```

The first row shows the column headers, and each following row holds the _comma separated values_. To read in a comma separated file, say `data.csv`, give it as a string argument like this: `read_csv("data.csv")`.

<div class="task-callout">Take a look at `hyderabad-sales-2023-june.csv` by reading it in with `read_csv()`.</div>

```{webr}
#| setup: true
#| exercise: ex5
library(tidyverse)
```

```{webr}
#| exercise: ex5

```

```{webr}
#| exercise: ex5
#| check: true

if(is.data.frame(.result) && all(.result == read_csv("hyderabad-sales-2023-june.csv"))) {
  list(correct = TRUE, message = "Ok! That looks like data to me!")
} else {
  list(correct = FALSE, message = 'Just go for read_csv("THE-FILENAME-HERE.csv"). Make sure to not assign the output of read_csv to any variable.')
}
```

::::
:::: {.instructions-and-exercise exercise="ex6"}

The printout above informs us that `hyderabad-sales-2023-june.csv` was read in as `A tibble: 30 × 5`. The `30` makes sense, there are 30 days in June, and there are `5` columns in the data frame, but what's a `tibble`? That's just the `tidyverse`'s version of R's regular data frames, but for the most part, they can be used in the same way.

But we can't use the data that we read in, at all! We read it in with `read_csv`, we got a printout, but, as we didn't assign it to a variable, we can't do anything with it. Remember that you assign values to variable names using the arrow operator `<-`. For example, `a_random_number <- runif(1)` would put a random number between 0.0 and 1.0 "into" `a_random_number`.

<div class="task-callout">Use `read_csv()` to read in `hyderabad-sales-2023-june.csv`, but now, assign it to the variable `sales`.</div>

```{webr}
#| setup: true
#| exercise: ex6
library(tidyverse)
```

```{webr}
#| exercise: ex6

```

```{webr}
#| exercise: ex6
#| check: true

if(is.data.frame(.envir_result$sales) && all(.envir_result$sales == read_csv("hyderabad-sales-2023-june.csv"))) {
  list(correct = TRUE, message = "Great! Now we can get to work!")
} else {
  list(correct = FALSE, message = 'Just like before, but now with sales <- in front, like so: sales <- read_csv("THE-FILENAME-HERE.csv"). Case is important, so make sure it\'s not Sales, SALES, or SaLeS.')
}
```

::::
:::: {.instructions-and-exercise exercise="ex7"}

Three of the most common things to do when analyzing data are:

1. _Summarize_ the data. For example, to sum up a column.
2. _Filter_ the data. For example, we might only want to look at the rows stamped with "Saturday".
3. _Group by_ some column (say the day of the week), and summarize each group.

The `tidyverse` has functions for all of these! 

The function that helps you summarize is called 🥁🥁🥁 `summarize`! The first argument is the data frame to operate on, and every subsequent _named_ argument defines a new summary. A bit abstract, maybe, but look at this:

```{r}
summarize(sales, avg_sold_ice_creams = mean(sold_ice_creams))
```
This takes the data frame `sales` and calculates the `mean` value of the column `sold_ice_creams`, and assigns it to a new column named `avg_sold_ice_creams`. The result is a new data frame with the summary (here just the single value). 

<div class="task-callout">Use `summarize()` to calculate the total number of sold ice creams in `sales`.</div>

```{webr}
#| setup: true
#| exercise: ex7
library(tidyverse)
sales <- read_csv("hyderabad-sales-2023-june.csv")
```

```{webr}
#| exercise: ex7
#| envir: sales

```

```{webr}
#| exercise: ex7
#| check: true

sales_summary <- summarize(sales, n_sold_ice_creams = sum(sold_ice_creams))

if(
  is.data.frame(.result) && 
  all(dim(.result) == dim(sales_summary)) &&
  .result[[1, 1]] == sales_summary[[1, 1]]
) {
  list(correct = TRUE, message = "Our ice cream sells like hot cakes!")
} else {
  list(correct = FALSE, message = "This one is a bit tricky, but look at the example above with mean(). But, instead of mean() use sum(). Also, it's important to not have any \"quotes\" around sold_ice_creams.")
}
```

::::
:::: {.instructions-and-exercise exercise="ex8"}

Like many other `tidyverse` functions, `summarize` allows you to freely reference column names from the data frame. For example, if we just write:

```{r}
#| error: true
sum(sold_ice_creams)
```

Then R will complain, and rightfully so, as `sold_ice_creams` is not an existing variable name. But when we write:

```{r}
summarize(sales, n_sold_ice_creams = sum(sold_ice_creams))
```
Then the `summarize` function knows to look among the columns in `sales` before complaining. Not all R functions are nice like this, but the `tidyverse` ones often are. 

The tidyverse functions are also well suited to combine using the pipe operator `|>`, so called because it takes data on the left and "pipes it in" as the first argument in the function on the right. Instead of writing `sum(1, 2, 3)`, one can go:

```{r}
1 |> sum(2, 3)
```

Similarly, as `summarize()` takes the data frame as the first argument, this is two ways of writing the same thing:

![](images/r-pipe-animation-small.gif)

<div class="task-callout">Rewrite the expression to use the pipe operator (`|>`), but it should still do the same thing.</div>

<details>
  <summary>How do I type a | (horizontal bar)?</summary>
  This can be a bit tricky, depending on your keyboard. If you can't figure it out, try searching for something like: <br>

  > How to type vertical bar on a French|Swedish|Italian Mac|Windows keyboard?

</details>

```{webr}
#| exercise: ex8
#| envir: sales
#| startover: true
summarize(sales, n_sold_ice_creams = sum(sold_ice_creams))
```

```{webr}
#| exercise: ex8
#| check: true

sales_summary <- summarize(sales, n_sold_ice_creams = sum(sold_ice_creams))

if(
  is.data.frame(.result) && 
  all(dim(.result) == dim(sales_summary)) &&
  .result[[1, 1]] == sales_summary[[1, 1]] &&
   grepl("|>", .user_code)
) {
  list(correct = TRUE, message = "Ok, we got the same result! So what was the point?")
} else {
  list(correct = FALSE, message = "Look at the animation above, you need to do the same thing here.")
}
```

::::
:::: {.instructions-and-exercise exercise="ex9"}

There's actually not really any point using `|>` for simple statements, like the above, but it makes it much easier to compose complex data transformations. We'll get to that soon!

For now, let's learn how to filter out the rows we want using the 🥁🥁🥁 `filter` function, which takes a data frame as the first argument, and then one or more _logical_ expressions, and returns only those rows that match all expressions. For example, days that were warmer than 40° C:

```{r}
sales |> filter(temp_max > 40.0)
```

Or the data from the 1st of June, 2023:

```{r}
sales |> filter(date == "2023-06-01")
```
There are many operators and functions that can be used in a logical expression, here are the most common ones:

| Logical operator |                  |
|----------|----------------------|
| `==`     | Equal to (yes, it's `==` and not `=`)             |
| `!=`     | Not equal to         |
| `>`      | Greater than         |
| `>=`     | Greater than or equal to |
| `<`      | Less than            |
| `<=`     | Less than or equal to   |
<br>

<div class="task-callout">Replace `______` with a `filter()` expression that keeps only the Saturday sales data.</div>

Tip: When using `==` to compare strings, uppercase and lowercase letters are not equal. `"O_O" == "O_o"` is `FALSE`.

```{webr}
#| exercise: ex9
#| envir: sales
#| startover: true
sales |> ______
```

```{webr}
#| exercise: ex9
#| check: true

saturday_sales <- sales |> filter(day_of_week == "Saturday")

if(
  is.data.frame(.result) && 
  all(dim(.result) == dim(saturday_sales)) &&
  all(.result == saturday_sales) &&
   grepl("|>", .user_code)
) {
  list(correct = TRUE, message = "Ok! Looks like ice cream beats coffee on Saturdays.")
} else {
  list(correct = FALSE, message = "Without giving anything away: The answer is NOT sales |> filter(day_of_week == \"Friday\") ...")
}
```

::::
:::: {.instructions-and-exercise exercise="ex10"}

Now comes the point of the pipe operator `|>` ! Using it we can combine, or _chain together_, several statements. For example, if we wanted to read in a CSV file and calculate the median doughnuts sold on Mondays, we _could_ squish it all into one single line:

```{r}
#| message: false
#| eval: false
ny_sales <- read_csv("new-york-sales-2025-april.csv")
summarize(filter(ny_sales, day_of_week == "Monday"), median_sold_doughnuts = median(sold_doughnuts))
```

But that's pretty unreadable! An alternative is to do one step at a time, assigning each intermediate result to a variable:

```{r}
#| message: false
#| eval: false
ny_sales <- read_csv("new-york-sales-2025-april.csv")
monday_sales <- filter(ny_sales, day_of_week == "Monday")
median_monday_sales <- summarize(
  monday_sales, median_sold_doughnuts = median(sold_doughnuts)
)
median_monday_sales
```

That's alright, I guess, but with the pipe operator `|>` we can simplify this even further!

```{r}
#| message: false
ny_sales <- read_csv("new-york-sales-2025-april.csv")
ny_sales |> 
  filter(day_of_week == "Monday") |> 
  summarize(median_sold_doughnuts = median(sold_doughnuts))
```

When using the `|>` it's common to have one function per line, with a two-space indent on all but the first line. 

<div class="task-callout">Combine the two last exercises and write a statement using `|>` that calculates the total number of ice creams we've sold on Saturdays in the `sales` data.</div>

```{webr}
#| exercise: ex10
#| envir: sales
#| min-lines: 3



```

```{webr}
#| exercise: ex10
#| check: true

sales_saturday_summary <- sales |> 
  filter(day_of_week == "Saturday") |> 
  summarize(n_sold_ice_creams = sum(sold_ice_creams))

if(
  is.data.frame(.result) && 
  all(dim(.result) == dim(sales_saturday_summary)) &&
  .result[[1, 1]] == sales_saturday_summary[[1, 1]] &&
  # Can we find two |> ?
  grepl(r"{(?s)\|>.*\|>}", .user_code, perl = TRUE)
) {
  list(correct = TRUE, message = "Nice and clean!")
} else {
  list(correct = FALSE, message = "Take a look at the ny_sales example above, but change to the sales data, with the correct day and treat.")
}
```

::::
:::: {.instructions-and-exercise exercise="ex11"}

That gave us the total number of sold ice creams for Saturdays, but what about all the other days? Enter `group_by()`. This is a function, which doesn't do anything by itself, but which modifies the behaviors of following functions. For example, here's code giving us the median number of sold doughnuts:

```{r}
#| message: false
ny_sales |> 
  summarize(median_sold_doughnuts = median(sold_doughnuts))
```

But say we wanted to group the data by each day, and calculate the median of each group? It's easy with `group_by()`:

```{r}
#| message: false
ny_sales |>
  group_by(day_of_week) |> 
  summarize(median_sold_doughnuts = median(sold_doughnuts))
```

It can be a bit hard to understand which functions `group_by()` can be used together with. But just the combo `group_by(...) |> summarize(...)` will take you far!

<div class="task-callout">Copy your code from the last exercise and replace `filter` with a `group_by` that gives you the total sold ice creams for each `day_of_the_week`, not only Saturday.</div>

```{webr}
#| exercise: ex11
#| envir: sales
#| min-lines: 3



```

```{webr}
#| exercise: ex11
#| check: true

sales_day_summary <- sales |> 
  group_by(day_of_week) |> 
  summarize(n_sold_ice_creams = sum(sold_ice_creams))

if(
  is.data.frame(.result) && 
  all(dim(.result) == dim(sales_day_summary)) &&
  all(sort(pull(.result, 2)) == sort(pull(sales_day_summary, 2)))
) {
  list(correct = TRUE, message = "Saturday is ice cream day!")
} else {
  list(correct = FALSE, message = "Take a look at the ny_sales example above. You only need to change what data and summary to use!")
}
```

::::
:::: {.instructions-and-exercise exercise="ex12"}

We could stop here, we already have a quite nice summary of our ice cream sales. But let's tack on one more thing to our data analysis pipeline.

It's often nice to sort a table and that can be achieved with the `arrange()` function which, just like `summarize` and `filter`, takes a data frame as the first argument and then one or more column names to sort by. For example, here's the Hyderabadi sales data frame with the warmest days first:

```{r}
sales |> arrange(desc(temp_max))
```

Here we wrapped `temp_max` with `desc(temp_max)` to sort in `desc`ending order, otherwise the default is to sort in ascending order.

<div class="task-callout">Copy your code from the last exercise and, by using `|>` to add an `arrange()` at the end, sort the result from most ice creams sold to least sold.</div>

```{webr}
#| exercise: ex12
#| envir: sales
#| min-lines: 4




```

```{webr}
#| exercise: ex12
#| check: true

sorted_sales_day_summary <- sales |> 
  group_by(day_of_week) |> 
  summarize(n_sold_ice_creams = sum(sold_ice_creams)) |> 
  arrange(desc(n_sold_ice_creams))

if(
  is.data.frame(.result) && 
  all(dim(.result) == dim(sorted_sales_day_summary)) &&
  all(pull(.result, 2) == pull(sorted_sales_day_summary, 2))
) {
  list(correct = TRUE, message = "With the best selling days at the top, everyone can see we sell the most during the weekend!")
} else {
  list(correct = FALSE, message = "Try again! You would need to add a |> a the end of the summarize()-line and then add an arrange(desc(...)) statement on the next line. Just do need to replace ... with the correct column name, no quotes needed around the name.")
}
```

::::
:::: {.completed-chapter-instructions}

Great work! Now you know how to read in data into a data frame and to `summarize`, `filter`, and `arrange` it to learn more about the data. Another important way to learn more about a dataset is to visualize it, which is what the next chapter is all about: : 👉[4. Visualization](/visualization.html)👈  

::::